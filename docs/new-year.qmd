---
title: "Is it New Year already?"
params:
  new_year: 2025
format: 
  html:
    css: css/styles.css
    output-file: "index.html"
editor: visual
execute:
  echo: false
  warning: false
  message: false
---

```{r setup}
library(tidyverse)
library(sf)
library(here)
library(ggtext)
library(ggiraph)
```

```{r load-data, cache=TRUE}
timezones_with_pop <- read_rds(here("data", "timezones-with-population.rds"))
```

```{r functions}
# Calculate whether it's the new year already in a given timezone
is_it_new_year <- function(tz, new_year = params$new_year) {
  stopifnot(tz %in% unique(st_drop_geometry(timezones_with_pop$tzid)))
  year(with_tz(Sys.time(), tz)) == new_year
}
```

```{r df-new-year}
timezones_with_pop_new_year <- timezones_with_pop |> 
  rowwise() |> 
  mutate(is_new_year = is_it_new_year(tzid)) |> 
  ungroup()
```

```{r}
# Population already in the New Year
pop_in_new_year <- timezones_with_pop_new_year |> 
  st_drop_geometry() |> 
  mutate(pop_share = pop / sum(pop)) |> 
  filter(is_new_year) |> 
  summarize(
    total_pop_share = sum(pop_share),
    total_pop = sum(pop)
  )

```

```{r theme}

color_pal <- c("#ADA8B6", "#52FFEE")
names(color_pal) <- c("FALSE", "TRUE")

theme_set(
  theme_void(base_family = "Roboto") + 
  theme(
    plot.background = element_rect(color = "grey10", fill = "grey10"),
    panel.background = element_rect(color = "transparent", fill = "transparent"),
    legend.position = "top",
    legend.background = element_rect(color = "transparent", fill = "transparent"),
    text = element_text(color = "white"),
    # axis.text = element_text(color = "white"),
    panel.grid = element_line(color = "grey80", linewidth = 0.25, linetype = "dotted")
  )
)
```

### Which timezones are [already in the New Year]{style="color:#52FFEE"}?

```{r map, dev = "png", dev.args=list(bg="transparent"), fig.width=12, fig.height=6.5}

# timezones_with_pop_new_year |> 
#   ggplot(aes(fill = is_new_year)) +
#   geom_sf(color = "grey10", linewidth = 0.1) +
#   scale_fill_manual(values = color_pal, labels = c("no", "yes")) +
#   labs(fill = "Is it the New Year?")

p_interactive <- timezones_with_pop_new_year |>
  ggplot(aes(fill = is_new_year)) +
  geom_sf_interactive(
    aes(tooltip = paste("<b>Timezone:</b>", tzid, "<br>",
                        "<b>Population:</b>", 
                        scales::number(pop, accuracy = 1, 
                                       big.mark = ",")
                        )),
    color = "grey10", linewidth = 0.1
  ) +
  scale_fill_manual(values = color_pal, labels = c("no", "yes")) +
  labs(fill = "Is it the New Year?") 

# Render the interactive map
girafe(
  ggobj = p_interactive,
  options = list(
    opts_tooltip(
      css = "background-color: white; color: black; font-family: Arial, sans-serif; font-size: 12px; padding: 5px; border-radius: 4px; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);"
    ),
    opts_sizing(rescale = TRUE),
    opts_toolbar(
      saveaspng = TRUE  
    )
  ),
  bg = "grey10")
  
```

Hover over a timezone to see the name of the timezone and the estimated population living within this timezone.

### And which share of the population is [already in the New Year]{style="color:#52FFEE"}?

```{r donut, dev = "png", dev.args=list(bg="transparent")}

pop_shares_new_year <- timezones_with_pop_new_year |> 
  st_drop_geometry() |> 
  group_by(is_new_year) |> 
  summarize(
    total_pop = sum(pop)) |> 
  mutate(total_pop_share = total_pop / sum(total_pop)) 

donut_label <- 
  sprintf(
    "%s<br><span style='font-size:15px'>%s</span>",
    scales::percent(
      pop_shares_new_year$total_pop_share[pop_shares_new_year$is_new_year], 
      accuracy = 0.1),
    scales::number(
      pop_shares_new_year$total_pop[pop_shares_new_year$is_new_year], 
      accuracy = 0.1, scale_cut = scales::cut_short_scale(),
      prefix = "approx. ", suffix = " people")
  )

pop_shares_new_year |> 
  ggplot(aes(x = 0, y = total_pop_share, fill = is_new_year)) +
  geom_col() +
  annotate(
    "richtext",
    x = -10, y = 0, 
    label = donut_label,
    color = "white", vjust = 1, size = 12, family = "Roboto", fill = NA, label.size = 0,
    lineheight = 0
  ) +
  scale_fill_manual(values = color_pal, labels = c("no", "yes")) +
  guides(fill = "none") +
  coord_radial(theta = "y", expand = FALSE, inner.radius = 0.2) +
  theme(panel.grid = element_blank())

```

##### Sources

-   Timezones: <https://github.com/evansiroky/timezone-boundary-builder> (MIT Licence)
-   Population density: GHSL (GHS-POP, 2020), Schiavina et al. (2023)
